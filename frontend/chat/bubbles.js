/**
 * A unique identifier for a chat bubble; only intended to be used by the client
 * @typedef {(string)} MessageId
 */

/**
  Creates a chat bubble and returns its id.

  @param {string} type - "sent" or "received"
  @returns {MessageId} The id of the created bubble
  @constructor
*/
export function createBubble(type) {
  const msgGuiId = "msg-" + crypto.randomUUID();
  document.getElementById("convo-div").innerHTML +=
    `<div id="${msgGuiId}" class="chat chat-${type == "sent" ? "end" : "start"}">
        <div class="chat-bubble"></div>
        <div class="chat-footer opacity-50"></div>
      </div>`;

  updateBubble(
    msgGuiId,
    `<span class="loading loading-dots loading-xs"></span>`,
    ``,
  );
  return msgGuiId;
}

/**
 *
 * @param {MessageId} id - the message id generated by createBubble
 * @param {string} content - "heyyyy"
 * @param {string} footer - e.g "Sent"
 */
export function updateBubble(id, content, footer) {
  const bubble = document.getElementById(id);
  bubble.getElementsByClassName("chat-bubble")[0].innerHTML = content;
  bubble.getElementsByClassName("chat-footer")[0].innerHTML = footer ?? ``;
}

/**
 * Displays a message in a chat bubble
 * @param {string} message - The message to display
 * @param {string} type - "sent" or "received"
 * @returns {MessageId} The id of the created bubble
 */
export function displayMessage(message, type) {
  const id = createBubble(type);
  updateBubble(id, message, ``);
  return id;
}
